BEGIN_OPS_PREAMBLE

#include "parrot/parrot.h"
#include "parrot/extend.h"
#include "parrot/dynext.h"
#include "nodes_parrot.h"

/* Prototype for compiler. */
char * MVM_mast_compile(VM, MASTNode *node, MASTNodeTypes *types, unsigned int *size);

/* Node types we're set up with. Not the best design, but hey, this code is
 * throwaway. */
static MASTNodeTypes node_types;

END_OPS_PREAMBLE

/*

=item mvm_compiler_setup()

Initializes the compiler with the types it will work on.

=cut

*/
inline op mvm_compiler_setup(invar PMC, invar PMC, invar PMC, invar PMC, invar PMC, invar PMC, invar PMC, invar PMC, invar PMC, invar PMC, invar PMC, invar PMC) :base_core {
    node_types.CompUnit     = $1;
    node_types.Frame        = $2;
    node_types.Op           = $3;
    node_types.SVal         = $4;
    node_types.IVal         = $5;
    node_types.NVal         = $6;
    node_types.Label        = $7;
    node_types.Local        = $8;
    node_types.Lexical      = $9;
    node_types.Call         = $10;
    node_types.Annotated    = $11;
    node_types.HandlerScope = $12;
}

/*

=item mvm_compiler_setup()

Calls the MoarVM MAST to bytecode compiler.

=cut

*/
inline op mvm_compile(invar PMC, in STR) :base_core {
    Parrot_block_GC_mark(interp);
    {
        unsigned int output_size;
        char *output = MVM_mast_compile(interp, $1, &node_types, &output_size);
        FILE *fh = fopen(Parrot_str_to_cstring(interp, $2), "wb+");
        fwrite(output, 1, output_size, fh);
        fclose(fh);
    }
    Parrot_unblock_GC_mark(interp);
}
